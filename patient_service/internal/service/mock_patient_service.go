// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/patient_service.go

// Package service is a generated GoMock package.
package service

import (
	models "patient_service/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPatientServiceInterface is a mock of PatientServiceInterface interface.
type MockPatientServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPatientServiceInterfaceMockRecorder
}

// MockPatientServiceInterfaceMockRecorder is the mock recorder for MockPatientServiceInterface.
type MockPatientServiceInterfaceMockRecorder struct {
	mock *MockPatientServiceInterface
}

// NewMockPatientServiceInterface creates a new mock instance.
func NewMockPatientServiceInterface(ctrl *gomock.Controller) *MockPatientServiceInterface {
	mock := &MockPatientServiceInterface{ctrl: ctrl}
	mock.recorder = &MockPatientServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPatientServiceInterface) EXPECT() *MockPatientServiceInterfaceMockRecorder {
	return m.recorder
}

// CreatePatient mocks base method.
func (m *MockPatientServiceInterface) CreatePatient(firstName, lastName, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePatient", firstName, lastName, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePatient indicates an expected call of CreatePatient.
func (mr *MockPatientServiceInterfaceMockRecorder) CreatePatient(firstName, lastName, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePatient", reflect.TypeOf((*MockPatientServiceInterface)(nil).CreatePatient), firstName, lastName, email)
}

// GetAllPatients mocks base method.
func (m *MockPatientServiceInterface) GetAllPatients() ([]*models.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPatients")
	ret0, _ := ret[0].([]*models.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPatients indicates an expected call of GetAllPatients.
func (mr *MockPatientServiceInterfaceMockRecorder) GetAllPatients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPatients", reflect.TypeOf((*MockPatientServiceInterface)(nil).GetAllPatients))
}

// GetPatient mocks base method.
func (m *MockPatientServiceInterface) GetPatient(patientID string) (*models.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatient", patientID)
	ret0, _ := ret[0].(*models.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatient indicates an expected call of GetPatient.
func (mr *MockPatientServiceInterfaceMockRecorder) GetPatient(patientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatient", reflect.TypeOf((*MockPatientServiceInterface)(nil).GetPatient), patientID)
}

// RemovePatient mocks base method.
func (m *MockPatientServiceInterface) RemovePatient(patientID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePatient", patientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePatient indicates an expected call of RemovePatient.
func (mr *MockPatientServiceInterfaceMockRecorder) RemovePatient(patientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePatient", reflect.TypeOf((*MockPatientServiceInterface)(nil).RemovePatient), patientID)
}

// UpdatePatient mocks base method.
func (m *MockPatientServiceInterface) UpdatePatient(patientID, firstName, lastName, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePatient", patientID, firstName, lastName, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePatient indicates an expected call of UpdatePatient.
func (mr *MockPatientServiceInterfaceMockRecorder) UpdatePatient(patientID, firstName, lastName, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatient", reflect.TypeOf((*MockPatientServiceInterface)(nil).UpdatePatient), patientID, firstName, lastName, email)
}
